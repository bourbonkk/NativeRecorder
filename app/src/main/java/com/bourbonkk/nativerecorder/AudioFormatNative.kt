package com.bourbonkk.nativerecorder

object AudioFormatNative {
    const val AUDIO_SOURCE_DEFAULT = 0
    const val AUDIO_SOURCE_MIC = 1
    const val AUDIO_SOURCE_VOICE_UPLINK = 2
    const val AUDIO_SOURCE_VOICE_DOWNLINK = 3
    const val AUDIO_SOURCE_VOICE_CALL = 4
    const val AUDIO_SOURCE_CAMCORDER = 5
    const val AUDIO_SOURCE_VOICE_RECOGNITION = 6
    const val AUDIO_SOURCE_VOICE_COMMUNICATION = 7
    // public static final int AUDIO_SOURCE_CNT;
    // public static final int AUDIO_SOURCE_MAX = AUDIO_SOURCE_CNT - 1;

    const val AUDIO_FORMAT_INVALID = -0x1
    const val AUDIO_FORMAT_DEFAULT = 0
    private const val AUDIO_FORMAT_PCM = 0x00000000 /* DO NOT CHANGE */
    const val AUDIO_FORMAT_MP3 = 0x01000000
    const val AUDIO_FORMAT_AMR_NB = 0x02000000
    const val AUDIO_FORMAT_AMR_WB = 0x03000000
    const val AUDIO_FORMAT_AAC = 0x04000000
    const val AUDIO_FORMAT_HE_AAC_V1 = 0x05000000
    const val AUDIO_FORMAT_HE_AAC_V2 = 0x06000000
    const val AUDIO_FORMAT_VORBIS = 0x07000000
    const val AUDIO_FORMAT_MAIN_MASK = -0x1000000
    const val AUDIO_FORMAT_SUB_MASK = 0x00FFFFFF

    const val AUDIO_FORMAT_PCM_16_BIT = AUDIO_FORMAT_PCM or 0x1
    const val AUDIO_FORMAT_PCM_8_BIT = AUDIO_FORMAT_PCM or 0x2
    const val AUDIO_FORMAT_PCM_32_BIT = AUDIO_FORMAT_PCM or 0x3
    const val AUDIO_FORMAT_PCM_8_24_BIT = AUDIO_FORMAT_PCM or 0x4

    const val AUDIO_INPUT_FLAG_NONE = 0x0 // no attributes
    const val AUDIO_INPUT_FLAG_FAST = 0x1

    const val SYNC_EVENT_SAME = -1
    const val SYNC_EVENT_NONE = 0

    private const val AUDIO_CHANNEL_OUT_FRONT_LEFT = 0x1
    private const val AUDIO_CHANNEL_OUT_FRONT_RIGHT = 0x2
    private const val AUDIO_CHANNEL_OUT_FRONT_CENTER = 0x4
    private const val AUDIO_CHANNEL_OUT_LOW_FREQUENCY = 0x8
    private const val AUDIO_CHANNEL_OUT_BACK_LEFT = 0x10
    private const val AUDIO_CHANNEL_OUT_BACK_RIGHT = 0x20
    private const val AUDIO_CHANNEL_OUT_FRONT_LEFT_OF_CENTER = 0x40
    private const val AUDIO_CHANNEL_OUT_FRONT_RIGHT_OF_CENTER = 0x80
    private const val AUDIO_CHANNEL_OUT_BACK_CENTER = 0x100
    private const val AUDIO_CHANNEL_OUT_SIDE_LEFT = 0x200
    private const val AUDIO_CHANNEL_OUT_SIDE_RIGHT = 0x400
    private const val AUDIO_CHANNEL_OUT_TOP_CENTER = 0x800
    private const val AUDIO_CHANNEL_OUT_TOP_FRONT_LEFT = 0x1000
    private const val AUDIO_CHANNEL_OUT_TOP_FRONT_CENTER = 0x2000
    private const val AUDIO_CHANNEL_OUT_TOP_FRONT_RIGHT = 0x4000
    private const val AUDIO_CHANNEL_OUT_TOP_BACK_LEFT = 0x8000
    private const val AUDIO_CHANNEL_OUT_TOP_BACK_CENTER = 0x10000
    private const val AUDIO_CHANNEL_OUT_TOP_BACK_RIGHT = 0x20000

    const val AUDIO_CHANNEL_OUT_MONO = AUDIO_CHANNEL_OUT_FRONT_LEFT
    const val AUDIO_CHANNEL_OUT_STEREO = AUDIO_CHANNEL_OUT_FRONT_LEFT or AUDIO_CHANNEL_OUT_FRONT_RIGHT
    const val AUDIO_CHANNEL_OUT_QUAD = (AUDIO_CHANNEL_OUT_FRONT_LEFT
            or AUDIO_CHANNEL_OUT_FRONT_RIGHT or AUDIO_CHANNEL_OUT_BACK_LEFT or AUDIO_CHANNEL_OUT_BACK_RIGHT)
    const val AUDIO_CHANNEL_OUT_SURROUND = (AUDIO_CHANNEL_OUT_FRONT_LEFT
            or AUDIO_CHANNEL_OUT_FRONT_RIGHT or AUDIO_CHANNEL_OUT_FRONT_CENTER or AUDIO_CHANNEL_OUT_BACK_CENTER)
    const val AUDIO_CHANNEL_OUT_5POINT1 = (AUDIO_CHANNEL_OUT_FRONT_LEFT
            or AUDIO_CHANNEL_OUT_FRONT_RIGHT
            or AUDIO_CHANNEL_OUT_FRONT_CENTER
            or AUDIO_CHANNEL_OUT_LOW_FREQUENCY or AUDIO_CHANNEL_OUT_BACK_LEFT or AUDIO_CHANNEL_OUT_BACK_RIGHT)

    // matches the correct AudioFormat.CHANNEL_OUT_7POINT1_SURROUND definition
    // for 7.1
    const val AUDIO_CHANNEL_OUT_7POINT1 = (AUDIO_CHANNEL_OUT_FRONT_LEFT
            or AUDIO_CHANNEL_OUT_FRONT_RIGHT
            or AUDIO_CHANNEL_OUT_FRONT_CENTER
            or AUDIO_CHANNEL_OUT_LOW_FREQUENCY
            or AUDIO_CHANNEL_OUT_BACK_LEFT
            or AUDIO_CHANNEL_OUT_BACK_RIGHT or AUDIO_CHANNEL_OUT_SIDE_LEFT or AUDIO_CHANNEL_OUT_SIDE_RIGHT)
    const val AUDIO_CHANNEL_OUT_ALL = (AUDIO_CHANNEL_OUT_FRONT_LEFT
            or AUDIO_CHANNEL_OUT_FRONT_RIGHT
            or AUDIO_CHANNEL_OUT_FRONT_CENTER
            or AUDIO_CHANNEL_OUT_LOW_FREQUENCY
            or AUDIO_CHANNEL_OUT_BACK_LEFT
            or AUDIO_CHANNEL_OUT_BACK_RIGHT
            or AUDIO_CHANNEL_OUT_FRONT_LEFT_OF_CENTER
            or AUDIO_CHANNEL_OUT_FRONT_RIGHT_OF_CENTER
            or AUDIO_CHANNEL_OUT_BACK_CENTER
            or AUDIO_CHANNEL_OUT_SIDE_LEFT
            or AUDIO_CHANNEL_OUT_SIDE_RIGHT
            or AUDIO_CHANNEL_OUT_TOP_CENTER
            or AUDIO_CHANNEL_OUT_TOP_FRONT_LEFT
            or AUDIO_CHANNEL_OUT_TOP_FRONT_CENTER
            or AUDIO_CHANNEL_OUT_TOP_FRONT_RIGHT
            or AUDIO_CHANNEL_OUT_TOP_BACK_LEFT
            or AUDIO_CHANNEL_OUT_TOP_BACK_CENTER or AUDIO_CHANNEL_OUT_TOP_BACK_RIGHT)

    /* input channels */
    private const val AUDIO_CHANNEL_IN_LEFT = 0x4
    private const val AUDIO_CHANNEL_IN_RIGHT = 0x8
    private const val AUDIO_CHANNEL_IN_FRONT = 0x10
    private const val AUDIO_CHANNEL_IN_BACK = 0x20
    private const val AUDIO_CHANNEL_IN_LEFT_PROCESSED = 0x40
    private const val AUDIO_CHANNEL_IN_RIGHT_PROCESSED = 0x80
    private const val AUDIO_CHANNEL_IN_FRONT_PROCESSED = 0x100
    private const val AUDIO_CHANNEL_IN_BACK_PROCESSED = 0x200
    private const val AUDIO_CHANNEL_IN_PRESSURE = 0x400
    private const val AUDIO_CHANNEL_IN_X_AXIS = 0x800
    private const val AUDIO_CHANNEL_IN_Y_AXIS = 0x1000
    private const val AUDIO_CHANNEL_IN_Z_AXIS = 0x2000
    private const val AUDIO_CHANNEL_IN_VOICE_UPLINK = 0x4000
    private const val AUDIO_CHANNEL_IN_VOICE_DNLINK = 0x8000

    const val AUDIO_CHANNEL_IN_MONO = AUDIO_CHANNEL_IN_FRONT
    const val AUDIO_CHANNEL_IN_STEREO = AUDIO_CHANNEL_IN_LEFT or AUDIO_CHANNEL_IN_RIGHT
    const val AUDIO_CHANNEL_IN_FRONT_BACK = AUDIO_CHANNEL_IN_FRONT or AUDIO_CHANNEL_IN_BACK
    const val AUDIO_CHANNEL_IN_ALL = (AUDIO_CHANNEL_IN_LEFT
            or AUDIO_CHANNEL_IN_RIGHT or AUDIO_CHANNEL_IN_FRONT
            or AUDIO_CHANNEL_IN_BACK or AUDIO_CHANNEL_IN_LEFT_PROCESSED
            or AUDIO_CHANNEL_IN_RIGHT_PROCESSED
            or AUDIO_CHANNEL_IN_FRONT_PROCESSED
            or AUDIO_CHANNEL_IN_BACK_PROCESSED or AUDIO_CHANNEL_IN_PRESSURE
            or AUDIO_CHANNEL_IN_X_AXIS or AUDIO_CHANNEL_IN_Y_AXIS
            or AUDIO_CHANNEL_IN_Z_AXIS or AUDIO_CHANNEL_IN_VOICE_UPLINK or AUDIO_CHANNEL_IN_VOICE_DNLINK)

    enum class transfer_type {
        TRANSFER_DEFAULT, // not specified explicitly; determine from other

        // parameters
        TRANSFER_CALLBACK, // callback EVENT_MORE_DATA
        TRANSFER_OBTAIN, // FIXME deprecated: call obtainBuffer() and

        // releaseBuffer()
        TRANSFER_SYNC
    }
}
